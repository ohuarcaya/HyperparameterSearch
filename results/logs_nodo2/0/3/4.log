/usr/lib/python3.4/site-packages/deap/tools/_hypervolume/pyhv.py:33: ImportWarning: Falling back to the python version of hypervolume module. Expect this to be very slow.
  "module. Expect this to be very slow.", ImportWarning)
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/_parallel_backends.py", line 344, in __call__
    return self.func(*args, **kwargs)
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py", line 131, in __call__
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py", line 131, in <listcomp>
    return [func(*args, **kwargs) for func, args, kwargs in self.items]
  File "/usr/lib64/python3.4/site-packages/sklearn/model_selection/_validation.py", line 238, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "/usr/lib64/python3.4/site-packages/sklearn/linear_model/passive_aggressive.py", line 299, in fit
    intercept_init=intercept_init)
  File "/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py", line 942, in _fit
    coef_init, intercept_init)
  File "/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py", line 891, in _partial_fit
    sample_weight, n_iter)
  File "/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py", line 1083, in _fit_regressor
    int(self.fit_intercept),
TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib64/python3.4/multiprocessing/pool.py", line 119, in worker
    result = (True, func(*args, **kwds))
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/_parallel_backends.py", line 353, in __call__
    raise TransportableException(text, e_type)
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
TypeError                                          Thu Dec 13 04:43:36 2018
PID: 17533                                   Python 3.4.9: /usr/bin/python3
...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False),        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, make_scorer(accuracy_score), array([    0,     1,     2, ..., 16323, 16324, 16325]), array([    4,    22,    36, ..., 16294, 16308, 16318]), 0, {'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': False})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False),        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, make_scorer(accuracy_score), array([    0,     1,     2, ..., 16323, 16324, 16325]), array([    4,    22,    36, ..., 16294, 16308, 16318]), 0, {'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': False}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, scorer=make_scorer(accuracy_score), train=array([    0,     1,     2, ..., 16323, 16324, 16325]), test=array([    4,    22,    36, ..., 16294, 16308, 16318]), verbose=0, parameters={'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False}, fit_params={}, return_train_score=False, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    233 
    234     try:
    235         if y_train is None:
    236             estimator.fit(X_train, **fit_params)
    237         else:
--> 238             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method PassiveAggressiveRegressor.fit of ...True, verbose=0,
              warm_start=False)>
        X_train =        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns]
        y_train = 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64
        fit_params = {}
    239 
    240     except Exception as e:
    241         # Note fit time as time until error
    242         fit_time = time.time() - start_time

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/passive_aggressive.py in fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64, coef_init=None, intercept_init=None)
    294         lr = "pa1" if self.loss == "epsilon_insensitive" else "pa2"
    295         return self._fit(X, y, alpha=1.0, C=self.C,
    296                          loss="epsilon_insensitive",
    297                          learning_rate=lr,
    298                          coef_init=coef_init,
--> 299                          intercept_init=intercept_init)
        intercept_init = None
    300 
    301 
    302 
    303 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64, alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', coef_init=None, intercept_init=None, sample_weight=None)
    937         # Clear iteration count for multiple call to fit.
    938         self.t_ = None
    939 
    940         return self._partial_fit(X, y, alpha, C, loss, learning_rate,
    941                                  self.n_iter, sample_weight,
--> 942                                  coef_init, intercept_init)
        coef_init = None
        intercept_init = None
    943 
    944     def fit(self, X, y, coef_init=None, intercept_init=None,
    945             sample_weight=None):
    946         """Fit linear model with Stochastic Gradient Descent.

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _partial_fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=array([[0., 0., 0., ..., 0., 0., 0.],
       [0...., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]), y=array([-7512.60416363, -7474.67      , -7359.193... -7398.4282    , -7676.6436    , -7413.9214    ]), alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', n_iter=5, sample_weight=array([1., 1., 1., ..., 1., 1., 1.]), coef_init=None, intercept_init=None)
    886             self.average_intercept_ = np.zeros(1,
    887                                                dtype=np.float64,
    888                                                order="C")
    889 
    890         self._fit_regressor(X, y, alpha, C, loss, learning_rate,
--> 891                             sample_weight, n_iter)
        sample_weight = array([1., 1., 1., ..., 1., 1., 1.])
        n_iter = 5
    892 
    893         return self
    894 
    895     def partial_fit(self, X, y, sample_weight=None):

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _fit_regressor(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=array([[0., 0., 0., ..., 0., 0., 0.],
       [0...., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]), y=array([-7512.60416363, -7474.67      , -7359.193... -7398.4282    , -7676.6436    , -7413.9214    ]), alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', sample_weight=array([1., 1., 1., ..., 1., 1., 1.]), n_iter=5)
   1078                           penalty_type,
   1079                           alpha, C,
   1080                           self.l1_ratio,
   1081                           dataset,
   1082                           n_iter,
-> 1083                           int(self.fit_intercept),
        self.fit_intercept = [True, False]
   1084                           int(self.verbose),
   1085                           int(self.shuffle),
   1086                           seed,
   1087                           1.0, 1.0,

TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'
___________________________________________________________________________
"""

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py", line 682, in retrieve
    self._output.extend(job.get(timeout=self.timeout))
  File "/usr/lib64/python3.4/multiprocessing/pool.py", line 608, in get
    raise self._value
sklearn.externals.joblib.my_exceptions.TransportableException: TransportableException
___________________________________________________________________________
TypeError                                          Thu Dec 13 04:43:36 2018
PID: 17533                                   Python 3.4.9: /usr/bin/python3
...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False),        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, make_scorer(accuracy_score), array([    0,     1,     2, ..., 16323, 16324, 16325]), array([    4,    22,    36, ..., 16294, 16308, 16318]), 0, {'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': False})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False),        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, make_scorer(accuracy_score), array([    0,     1,     2, ..., 16323, 16324, 16325]), array([    4,    22,    36, ..., 16294, 16308, 16318]), 0, {'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': False}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, scorer=make_scorer(accuracy_score), train=array([    0,     1,     2, ..., 16323, 16324, 16325]), test=array([    4,    22,    36, ..., 16294, 16308, 16318]), verbose=0, parameters={'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False}, fit_params={}, return_train_score=False, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    233 
    234     try:
    235         if y_train is None:
    236             estimator.fit(X_train, **fit_params)
    237         else:
--> 238             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method PassiveAggressiveRegressor.fit of ...True, verbose=0,
              warm_start=False)>
        X_train =        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns]
        y_train = 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64
        fit_params = {}
    239 
    240     except Exception as e:
    241         # Note fit time as time until error
    242         fit_time = time.time() - start_time

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/passive_aggressive.py in fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64, coef_init=None, intercept_init=None)
    294         lr = "pa1" if self.loss == "epsilon_insensitive" else "pa2"
    295         return self._fit(X, y, alpha=1.0, C=self.C,
    296                          loss="epsilon_insensitive",
    297                          learning_rate=lr,
    298                          coef_init=coef_init,
--> 299                          intercept_init=intercept_init)
        intercept_init = None
    300 
    301 
    302 
    303 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64, alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', coef_init=None, intercept_init=None, sample_weight=None)
    937         # Clear iteration count for multiple call to fit.
    938         self.t_ = None
    939 
    940         return self._partial_fit(X, y, alpha, C, loss, learning_rate,
    941                                  self.n_iter, sample_weight,
--> 942                                  coef_init, intercept_init)
        coef_init = None
        intercept_init = None
    943 
    944     def fit(self, X, y, coef_init=None, intercept_init=None,
    945             sample_weight=None):
    946         """Fit linear model with Stochastic Gradient Descent.

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _partial_fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=array([[0., 0., 0., ..., 0., 0., 0.],
       [0...., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]), y=array([-7512.60416363, -7474.67      , -7359.193... -7398.4282    , -7676.6436    , -7413.9214    ]), alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', n_iter=5, sample_weight=array([1., 1., 1., ..., 1., 1., 1.]), coef_init=None, intercept_init=None)
    886             self.average_intercept_ = np.zeros(1,
    887                                                dtype=np.float64,
    888                                                order="C")
    889 
    890         self._fit_regressor(X, y, alpha, C, loss, learning_rate,
--> 891                             sample_weight, n_iter)
        sample_weight = array([1., 1., 1., ..., 1., 1., 1.])
        n_iter = 5
    892 
    893         return self
    894 
    895     def partial_fit(self, X, y, sample_weight=None):

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _fit_regressor(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=array([[0., 0., 0., ..., 0., 0., 0.],
       [0...., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]), y=array([-7512.60416363, -7474.67      , -7359.193... -7398.4282    , -7676.6436    , -7413.9214    ]), alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', sample_weight=array([1., 1., 1., ..., 1., 1., 1.]), n_iter=5)
   1078                           penalty_type,
   1079                           alpha, C,
   1080                           self.l1_ratio,
   1081                           dataset,
   1082                           n_iter,
-> 1083                           int(self.fit_intercept),
        self.fit_intercept = [True, False]
   1084                           int(self.verbose),
   1085                           int(self.shuffle),
   1086                           seed,
   1087                           1.0, 1.0,

TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'
___________________________________________________________________________

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "main.py", line 58, in <module>
    ev.fit(scoring='mse', n_jobs=cpu_count(), kargs=searchParams)
  File "/home/Manuel.Castillo/pruebasOHC/lib/ProcessManager.py", line 62, in fit
    rscv.fit(self.X, self.y)
  File "/usr/lib64/python3.4/site-packages/sklearn/model_selection/_search.py", line 1190, in fit
    return self._fit(X, y, groups, sampled_params)
  File "/usr/lib64/python3.4/site-packages/sklearn/model_selection/_search.py", line 564, in _fit
    for parameters in parameter_iterable
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py", line 768, in __call__
    self.retrieve()
  File "/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py", line 719, in retrieve
    raise exception
sklearn.externals.joblib.my_exceptions.JoblibTypeError: JoblibTypeError
___________________________________________________________________________
Multiprocessing exception:
...........................................................................
/home/Manuel.Castillo/pruebasOHC/main.py in <module>()
     53 """
     54 ev = Evaluator(X_train, y_train[y_column], seed)
     55 ev.setEstimador(estimador)
     56 ev.setParams(parametros)
     57 ev.setTypeSearch(process)
---> 58 ev.fit(scoring='mse', n_jobs=cpu_count(), kargs=searchParams)
     59 # Guardar Modelo en formato csv
     60 ev.saveDataFrame(modelName + y_column)
     61 
     62 

...........................................................................
/home/Manuel.Castillo/pruebasOHC/lib/ProcessManager.py in fit(self=<lib.ProcessManager.Evaluator object>, scoring='mse', n_jobs=16, kargs={'elit': 2, 'ngen': 1, 'pelit': 0.5, 'psize': 2})
     57             self.dff = pd.concat([df1,df2], axis=1).sort_values(['Accuracy', 'FitTime'], ascending=[False, True])
     58         if (self.type == 'randomized'):
     59             rscv = RandomizedSearchCV(self.estimador, param_distributions=self.params, 
     60                                 n_iter=generaciones, cv=self.kf, scoring="accuracy", 
     61                                 return_train_score=False, n_jobs=n_jobs)
---> 62             rscv.fit(self.X, self.y)
        rscv.fit = <bound method RandomizedSearchCV.fit of Randomiz...rain_score=False, scoring='accuracy', verbose=0)>
        self.X =        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns]
        self.y = 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64
     63             rscv.cv_results_ = rscv.cv_results_
     64             df1 = pd.DataFrame(np.array([rscv.cv_results_['mean_test_score'], rscv.cv_results_['std_test_score'],
     65                                         rscv.cv_results_['mean_fit_time'], rscv.cv_results_['std_fit_time'],
     66                                         rscv.cv_results_['mean_score_time'], rscv.cv_results_['std_score_time']

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/model_selection/_search.py in fit(self=RandomizedSearchCV(cv=KFold(n_splits=10, random_...train_score=False, scoring='accuracy', verbose=0), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, groups=None)
   1185             train/test set.
   1186         """
   1187         sampled_params = ParameterSampler(self.param_distributions,
   1188                                           self.n_iter,
   1189                                           random_state=self.random_state)
-> 1190         return self._fit(X, y, groups, sampled_params)
        self._fit = <bound method RandomizedSearchCV._fit of Randomi...rain_score=False, scoring='accuracy', verbose=0)>
        X =        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns]
        y = 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64
        groups = None
        sampled_params = <sklearn.model_selection._search.ParameterSampler object>
   1191 
   1192 
   1193 
   1194 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/model_selection/_search.py in _fit(self=RandomizedSearchCV(cv=KFold(n_splits=10, random_...train_score=False, scoring='accuracy', verbose=0), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, groups=None, parameter_iterable=<sklearn.model_selection._search.ParameterSampler object>)
    559                                   fit_params=self.fit_params,
    560                                   return_train_score=self.return_train_score,
    561                                   return_n_test_samples=True,
    562                                   return_times=True, return_parameters=True,
    563                                   error_score=self.error_score)
--> 564           for parameters in parameter_iterable
        parameters = undefined
        parameter_iterable = <sklearn.model_selection._search.ParameterSampler object>
    565           for train, test in cv_iter)
    566 
    567         # if one choose to see train score, "out" will contain train score info
    568         if self.return_train_score:

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=Parallel(n_jobs=16), iterable=<generator object <genexpr>>)
    763             if pre_dispatch == "all" or n_jobs == 1:
    764                 # The iterable was consumed all at once by the above for loop.
    765                 # No need to wait for async callbacks to trigger to
    766                 # consumption.
    767                 self._iterating = False
--> 768             self.retrieve()
        self.retrieve = <bound method Parallel.retrieve of Parallel(n_jobs=16)>
    769             # Make sure that we get a last message telling us we are done
    770             elapsed_time = time.time() - self._start_time
    771             self._print('Done %3i out of %3i | elapsed: %s finished',
    772                         (len(self._output), len(self._output),

---------------------------------------------------------------------------
Sub-process traceback:
---------------------------------------------------------------------------
TypeError                                          Thu Dec 13 04:43:36 2018
PID: 17533                                   Python 3.4.9: /usr/bin/python3
...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in __call__(self=<sklearn.externals.joblib.parallel.BatchedCalls object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        self.items = [(<function _fit_and_score>, (PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False),        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, make_scorer(accuracy_score), array([    0,     1,     2, ..., 16323, 16324, 16325]), array([    4,    22,    36, ..., 16294, 16308, 16318]), 0, {'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False}), {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': False})]
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/externals/joblib/parallel.py in <listcomp>(.0=<list_iterator object>)
    126     def __init__(self, iterator_slice):
    127         self.items = list(iterator_slice)
    128         self._size = len(self.items)
    129 
    130     def __call__(self):
--> 131         return [func(*args, **kwargs) for func, args, kwargs in self.items]
        func = <function _fit_and_score>
        args = (PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False),        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, make_scorer(accuracy_score), array([    0,     1,     2, ..., 16323, 16324, 16325]), array([    4,    22,    36, ..., 16294, 16308, 16318]), 0, {'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False})
        kwargs = {'error_score': 'raise', 'fit_params': {}, 'return_n_test_samples': True, 'return_parameters': True, 'return_times': True, 'return_train_score': False}
    132 
    133     def __len__(self):
    134         return self._size
    135 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/model_selection/_validation.py in _fit_and_score(estimator=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[16326 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 16326, dtype: float64, scorer=make_scorer(accuracy_score), train=array([    0,     1,     2, ..., 16323, 16324, 16325]), test=array([    4,    22,    36, ..., 16294, 16308, 16318]), verbose=0, parameters={'C': [0.8, 0.9, 1.0, 1.1, 1.2], 'fit_intercept': [True, False], 'warm_start': False}, fit_params={}, return_train_score=False, return_parameters=True, return_n_test_samples=True, return_times=True, error_score='raise')
    233 
    234     try:
    235         if y_train is None:
    236             estimator.fit(X_train, **fit_params)
    237         else:
--> 238             estimator.fit(X_train, y_train, **fit_params)
        estimator.fit = <bound method PassiveAggressiveRegressor.fit of ...True, verbose=0,
              warm_start=False)>
        X_train =        WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns]
        y_train = 1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64
        fit_params = {}
    239 
    240     except Exception as e:
    241         # Note fit time as time until error
    242         fit_time = time.time() - start_time

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/passive_aggressive.py in fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64, coef_init=None, intercept_init=None)
    294         lr = "pa1" if self.loss == "epsilon_insensitive" else "pa2"
    295         return self._fit(X, y, alpha=1.0, C=self.C,
    296                          loss="epsilon_insensitive",
    297                          learning_rate=lr,
    298                          coef_init=coef_init,
--> 299                          intercept_init=intercept_init)
        intercept_init = None
    300 
    301 
    302 
    303 

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=       WAP001  WAP002  WAP003  WAP004  WAP005   ...1          0     0  

[14693 rows x 1055 columns], y=1007    -7512.604164
14408   -7474.670000
15019 ...00
Name: LONGITUDE, Length: 14693, dtype: float64, alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', coef_init=None, intercept_init=None, sample_weight=None)
    937         # Clear iteration count for multiple call to fit.
    938         self.t_ = None
    939 
    940         return self._partial_fit(X, y, alpha, C, loss, learning_rate,
    941                                  self.n_iter, sample_weight,
--> 942                                  coef_init, intercept_init)
        coef_init = None
        intercept_init = None
    943 
    944     def fit(self, X, y, coef_init=None, intercept_init=None,
    945             sample_weight=None):
    946         """Fit linear model with Stochastic Gradient Descent.

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _partial_fit(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=array([[0., 0., 0., ..., 0., 0., 0.],
       [0...., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]), y=array([-7512.60416363, -7474.67      , -7359.193... -7398.4282    , -7676.6436    , -7413.9214    ]), alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', n_iter=5, sample_weight=array([1., 1., 1., ..., 1., 1., 1.]), coef_init=None, intercept_init=None)
    886             self.average_intercept_ = np.zeros(1,
    887                                                dtype=np.float64,
    888                                                order="C")
    889 
    890         self._fit_regressor(X, y, alpha, C, loss, learning_rate,
--> 891                             sample_weight, n_iter)
        sample_weight = array([1., 1., 1., ..., 1., 1., 1.])
        n_iter = 5
    892 
    893         return self
    894 
    895     def partial_fit(self, X, y, sample_weight=None):

...........................................................................
/usr/lib64/python3.4/site-packages/sklearn/linear_model/stochastic_gradient.py in _fit_regressor(self=PassiveAggressiveRegressor(C=[0.8, 0.9, 1.0, 1.1...=True, verbose=0,
              warm_start=False), X=array([[0., 0., 0., ..., 0., 0., 0.],
       [0...., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]), y=array([-7512.60416363, -7474.67      , -7359.193... -7398.4282    , -7676.6436    , -7413.9214    ]), alpha=1.0, C=[0.8, 0.9, 1.0, 1.1, 1.2], loss='epsilon_insensitive', learning_rate='pa1', sample_weight=array([1., 1., 1., ..., 1., 1., 1.]), n_iter=5)
   1078                           penalty_type,
   1079                           alpha, C,
   1080                           self.l1_ratio,
   1081                           dataset,
   1082                           n_iter,
-> 1083                           int(self.fit_intercept),
        self.fit_intercept = [True, False]
   1084                           int(self.verbose),
   1085                           int(self.shuffle),
   1086                           seed,
   1087                           1.0, 1.0,

TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'
___________________________________________________________________________
